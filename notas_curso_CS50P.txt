hola mundo 


print(f"{z:,}") ---> puedes hacer print de una variable y separa los cada tres numeros con una ,.


print(f"{z:.2f}") ---> para redondear, solo dos digitos despues de la coma.

Si quiero poner un parametron por default puede hacerlo hello(x='word') si no le meto un parametro automáticamente toma el por default


Match  ---> funciona como if, elif, else. Pero es mas capacto y fácil de leer. 

Ejemplo:

match name:
	case 'Harry'| 'Hermione' | 'Ron':
		print('Gryffindor')
	case 'Draco':
		print(Slytherin')
	case _:
		print('who?')

Esto funciona cuando le mete una variable llamada name, que en este caso es un string, y si se da el caso de que este string es Harry, Hermione o Ron entonces va a imprimir que son de Gryddindor, si es el caso de Draco entonces va a imprimir Slytherin. Y si no es un caso se;alado ósea necesitamos un elif, con match funciona como case _, esto es como un elif.

Si haces un bucle con una variable que no usas puedes hacerla sin nombre

for _ in range(3):
	print("meow")

podemos usar un loop while par verificar que la respuesta que queremos del usuario sea correcta

ejemplo: 

while True:
	x = int(input("cual es n? "))
	if x > 0:
		break

este es un loop infinito que solo se va a terminar cuando le das la respuesta que necesitas, en este caso un numero positivo.



si sabemos que errores puede ocasionar un malfuncionamiento de nuestro código  podemos hacer una excepción de ese código. 

ejemplo:

try:
	x = int(input( "x: "))
except ValueError:
	print("no es un entero")
else:
	print(f"x es {x}")

escribp esto para hacer notar que el else también se puede usar en este tipo de situaciones, con este tipo de sintaxis. 

El else esta asociado con el try, no con el except. Si el try funciona se produce el else si en su lugar funciona el except el código muere ahi


------------------------------------------
En la semana 4 Libraries.

Se esta usando como ejmeplo la librería random. 

se ha usado choice([]), randint(a,b), 
shuffle([]) esta ultima baraja los elementos de una lista. 

statistics.

mean() ---> este es el promedio.

sys

sys.argv es una lista de las palabaras que colocas en el terminal cuando vas a correr el programa. Estas plabaras incluyen el nombre del programa

ejemplo:

python name.py Carmelo Garcia

si esto se ejecuta sys.argv = ['name.py','Carmelo'.'Garcia']

sys.exit('mensaje') --> esta function interrumpe el programa y te da el mensaje en el terminal es como un print pero ademas te termina el programa

------------------------------------File I/O------------------------------------------------------
Si necesitamos guardar variable o datos de nuestro programa a un archivo aparte, ejemplo un archivo .txt. Podemos hacer uso de open.
 
ejm:
name = input("What's your name? ")

file = open("names.txt", "w")
file.write(name)
file.close()

Esto creara un archivo y escribira la variable name en el. Sin embargo, cada vez que corramos el programa el archivo se va a crear desde cero. Si queres que se agreguen los valores a un archivo existente en la ultima linea. Deberiamos cambiar el segundo argumento 'a' que significa append. entonces el codigo se vera asi

file = open("names.txt", "a")
file.write(f'{name}\n')
file.close()

por que necesitamos agragar una linea al fina? Debido a que cuando escribimos en el archivo una y otra vez las strings se van a concatenar entonces vamos a tener 'JesusMariaJose' y lo que queremos es 

'Jesus
Maria
Jose'

De esta forma es que lo lograremos, agregando una linea al final de cada innput. 

Sin embargo, en esta forma de crear archivos se nos puede olvidar la linea file.close(). Esto puede traernos problemas. Pero, hay una forma de hacer los mismo de una manera mas compacta. Con with.

Ejm.

with open('name.txt', 'a') as file:
	file.write(f'{name}\n')

Esto hace lo mismo que hicimos antes y cierra automaticamente el archivo. Tambien es mas compacto y facil de leer.

Ahora si quiero leer las lineas de este archivo que hemos creado. Podemos hacerlo de la siguiente forma:

with open('name.txt','r') as file:
	for line in file:
		print(f'hellos, {line.rstrip()}')

eso va a abrir el archivo, leer todas las lineas y imprimirals en el terminal. Tambien se puede aplicar metodos de python como sorted. 

with open('name.txt','r') as file:
	for line in sorted(file):
		print(f'hellos, {line.rstrip()}')

aqui no vas a devolver los nombres del archivo organizados alfabeticamente. 

Dato curioso y util, sa funcion de python sorted() tiene un argumento que te permite usar funciones creadas por ti. Por ejemplo no puodemos aplicar sorted a un diccionario, pero podemos hacer una funcion que me devuelva un elemento de un diccionario ya sea una key o una value y eso si se puede organizar. 

entonces quedaria algo asi sorted(dictionary, key=name_function)

Para ahorrarno el tener que definir una funcion que solo vamos a usar dentro de sorted en otro lado del codigo. Podemos hacer uso de una forma de crear una funcion 'anonima' esta manera se llama lambda. funciona de la siguiente forma. 

sorted(dictionary, key=lambda parametro: lo que hace la funcion)

en el caso de hacer que me devuelva un value de un diccionario

sorted(dictionary, key=lambda dictionary: dictionary['key'])

Lectura y manejo de archivos csv. 

Python tiene una libreria llamada csv que es bastante completa a la hora de leer y manejar estos archivos. 

Lo podemos usar de la forma que ya conocemos

import csv
students= []
with open('name.csv') as file:
	reader = csv.reader(file)
	for name, home in reader:
		students.append({'name': name, 'home': home})

este csv reader nos va a permitir leer de una manera mas eficiente un csv. Por ejemplo si queremos acceder a los datos separando cada linea con splip(',') entonces que pasa si queremos guardar una frase que incluye una coma. Entonces nuestro split va a cortar donde debe y donde no debe. Este tipo de cosa se resuelven usando csv. Claro y si quieres meter una frase que contenga comas, utiliza las comillas para delimitarla. 


Tambien podemos ver a un csv como un excel con columnas y filas. De esta forma podriamos hacer que nuestra fila 0 sean los nombres de nuestra columna y poder interar los valores de cada columna con el nombre de la columna. Asi como lo hace un diccionario. Esto lo podemos hacer 

import csv
students= []
with open('name.csv') as file:
	reader = csv.DictReader(file)
	for row in reader:
		students.append({'name': row['name'], 'home': row['home']})



El lector de diccionarios nos devuelve un diccionario. entonces nuestros valores estaran relacionados con el nombre de su columna y entonces mi codigo sera mas robisto porque no tengo que estar pendiente de en que posicion estan mis datos sino en como se llama la columna donde estan mis datos

----Escribir CSV------

con la libreria csv tambien podemos escribir en un archivo csv de manera eficiente. Hay varias formas pero veremos solo 2. 

import csv

name = input('What's your name? ')
home = onput('Where's your home? ')

with open('students.csv', 'a') as file:
	writer = csv.wrtier(file)
	writer.writerow([name, home])

este programa va a preguntarnos por las variables name y home y las va a incluir en un archivo csv (creado previamente) en orden, primero name y luego home como lo dice la linea writer.writerow([name, home]). 

Pero que pasa cuando tenemos muchas variables y queremos que esten asociadas a una columna especifica y queremos reorganizar las columnas de una manera distintita o no solo una forma mas eficiente y robusta de hacerlo es 

import csv

name = input('What's your name? ')
home = onput('Where's your home? ')

with open('students.csv', 'a') as file:
	writer = csv.wrtier(file, fieldnames=['name','home'])
	writer.writerow({'name': name, 'home': home})


entonces con el argumento fieldname le decimos el nombres de las columnas de nuestro csv. y en writerow le pasamos el diccionario con los nombres de las columnas y las variables que queremos agregar.

-----------Regexes------------------------

Toda la info y la sintaxis sobre Expresiones regulares en el siguiente enlace. 
 https://www.w3schools.com/python/python_regex.asp


--------Object-Oriented Programming--------


classes  es como un molde de un nuevo tipo de data que el programador puede definir y diseñar. Las classes tienen atributos. Estos atributos pueden ser usados con puntos.

ejm: class_name.attribute

se usa similar a las funciones. 

class class_name:
	...

cuando usamos una class, estamos creado un objeto. Si usamos la metafora de que una classe es como un molde de una casa, entonces un objeto es cuando usas ese molde para construir una casa en particular.

Tambien podemos tener dentro de una class metodos. que son como una funcion que podemos definir dentro de una clase para que el objeto se comporte de una manera predefinida. 

Para el ejmplo vamos a usar la class hecha en la clase. 

class Student:
	def __init__(self, name, house):
		self.name = name
		self.house = house

Entonces en esta clase tenemos una funcion llamada __init__, esta funcion es por defecto inicializa un objeto en python. tenemos un parametro necesario que puede ser cualquier palabra que tiene que ir primero y que por convencion es self. Este 'self' ayuda a 'guardar' en el objeto que acabamos de instanciar, self te da acceso a objeto que acabamos de crear. Entonces dentro del objeto se hizo self.name y self.house y esto es que estamos creando los atributos de este objeto. 

Como estamos creando un nuevo tipo de dato a nuestra conveniencia, si hay un problema con los datos y no es algo que toleramos podemos hacer uso del raise y asi si hay un parametro que no nos gusta el objeto dara error. 


class Student:
	def __init__(self, name, house):
		if no name:
			raise ValueError('Missing name')
		if house no in ['Gryffindor', 'Hufflepuff', 'Ravenclaw', 'Slytherin']:
			raise ValueError('Invalid House')
		self.name = name
		self.house = house


--------Et Cetera------------------------------

1) set

set --> es un objeto que funciona como una lista pero elimina los duplicados. 

set_name = set() ---> instanciando un set vacio.


2) global variables

una variable que esta declarada afuera de todas las fucniones es una variable 'global'. Las funciones o las clases pueden leerla pero no escribir en ellas. Por eso debemos decirle a las funciones y a las clases que la variable es una variable global. Ejm

blance = 0 

def main():
	doposit(100)
	print("Balance:",balance)

def deposit(n):
	global balance #aqui le estamos diciendo que balance es una varaible global y si la edita se edita globalmente.
	balance += n

Sin embargo esta forma de programar se puede volver dificil de leer o entenerde porque va a llegar un punto donde no se sabra donde se esta almacenando la infromacion. Una manera de prevenir esto, es no usar esta forma y usar las clases y asi empaquetar toda la info y las funciones que necesitamos. ejemplo


class Account:
	def __init__(self):
		self._balance = 0
	@property
	def balance(self):
		return self._balance
	def deposit(self, n):
		self.balance += n
	def withdraw(self,n):
		self._balance -= n
def main():
	account = Account()
	account.deposit(100)
	print("balance", account.balance)
	account.withdraw(50)
	print("balance", account.balance)


	

















